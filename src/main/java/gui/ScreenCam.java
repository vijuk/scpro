package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/**
 * This type was generated by a SmartGuide.
 */
public class ScreenCam extends JFrame implements java.awt.event.WindowListener {
	JFileChooser m_FC = null;
	boolean m_SaveFlag = false;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JMenuItem ivjExitMenuItem = null;
	static String m_CurrentTimeStamp = "";
	private JMenu ivjFileMenu = null;
	private JMenuItem ivjOpenMenuItem = null;
	private JMenuItem ivjSave_AsMenuItem = null;
	private JToolBar ivjToolBarPane = null;
	private JSeparator ivjJSeparator11 = null;
	private JSeparator ivjJSeparator111 = null;
	private JPanel ivjMainContentPane = null;
	private final BorderLayout ivjMainContentPaneBorderLayout = null;
	private JMenuBar ivjMainPanelJMenuBar = null;
	private JButton ivjPlayButton = null;
	private JMenu ivjPlayMenu = null;
	private JMenuItem ivjPlayMenuItem = null;
	private JButton ivjRecordButton = null;
	private JMenu ivjRecordMenu = null;
	private JPanel ivjScreenPanel = null;
	private JSeparator ivjSeperator = null;
	private JMenuItem ivjStartRecordMenuItem = null;
	private JButton ivjStopButton = null;
	private JMenuItem ivjStopMenuItem = null;
	private JButton ivjOpenButton = null;
	private JButton ivjSaveButton = null;
	private JSeparator ivjSeperator1 = null;
	private JSeparator ivjSeperator11 = null;
	public player.Player m_Player = null;
	public java.io.File m_CurrentFile = null;
	public static final int SC_IDLE = 0;
	public static final int SC_PLAYING = 1;
	public static final int SC_RECORDING = 2;
	public boolean m_Paused = false;
	public int m_Status = SC_IDLE;
	public recorder.Recorder m_Recorder = null;
	public java.io.File m_LastDir = null;
	public boolean m_Closing;
	private JButton ivjRewindButton = null;
	private JMenuItem ivjRewindMenuItem = null;

	class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(final java.awt.event.ActionEvent e) {
			if (e.getSource() == ScreenCam.this.getExitMenuItem()) {
				connEtoM1(e);
			}
			if (e.getSource() == ScreenCam.this.getOpenButton()) {
				connEtoC1();
			}
			if (e.getSource() == ScreenCam.this.getSaveButton()) {
				connEtoC2();
			}
			if (e.getSource() == ScreenCam.this.getPlayButton()) {
				connEtoC4();
			}
			if (e.getSource() == ScreenCam.this.getStopButton()) {
				connEtoC5();
			}
			if (e.getSource() == ScreenCam.this.getRecordButton()) {
				connEtoC6();
			}
			if (e.getSource() == ScreenCam.this.getRewindButton()) {
				connEtoC17();
			}
			if (e.getSource() == ScreenCam.this.getOpenMenuItem()) {
				connEtoC3();
			}
			if (e.getSource() == ScreenCam.this.getSave_AsMenuItem()) {
				connEtoC7();
			}
			if (e.getSource() == ScreenCam.this.getPlayMenuItem()) {
				connEtoC8();
			}
			if (e.getSource() == ScreenCam.this.getStopMenuItem()) {
				connEtoC9();
			}
			if (e.getSource() == ScreenCam.this.getStartRecordMenuItem()) {
				connEtoC10();
			}
			if (e.getSource() == ScreenCam.this.getRewindMenuItem()) {
				connEtoC11();
			}
		};
	};

	public Message m_Message;

	/**
	 * Main constructor comment.
	 */
	public ScreenCam() {
		super();
		initialize();
		m_Message = new Message();
		setDefault();
		/* Calculate the screen size */
		final Dimension screenSize = Toolkit.getDefaultToolkit()
				.getScreenSize();

		// aMain.getPlayer();
		// Window win = new Window(aMain);

		// win.setBounds(0, 0, (int)screenSize.getWidth(),
		// (int)screenSize.getHeight());
		// win.setVisible(true);

		/* Pack frame on the screen */
		pack();

		/* Center frame on the screen */
		final Dimension frameSize = getSize();
		if (frameSize.height > screenSize.height) {
			frameSize.height = screenSize.height;
		}
		if (frameSize.width > screenSize.width) {
			frameSize.width = screenSize.width;
		}
		setLocation((screenSize.width - frameSize.width) / 2,
				(screenSize.height - frameSize.height) / 2);
		setDefault();

		/* Add a windowListener for the windowClosedEvent */
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosed(final java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		setVisible(true);
	}

	/**
	 * Main constructor comment.
	 * 
	 * @param title
	 *            java.lang.String
	 */
	public ScreenCam(final String title) {
		super(title);
	}

	/**
	 * Comment
	 */
	public void backButton_ActionEvents() {
		return;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 2:45:23
	 * AM)
	 */
	public boolean confirmSave() {
		if (m_SaveFlag) {
			final int return_value = postQuestion3("Do you want to save the recorded movie?");
			if (return_value == Message.YES_OPTION) {
				saveButton_ActionEvents();
			} else if (return_value == Message.NO_OPTION) {
			} else {
				return false;
			}
		}
		m_SaveFlag = false;
		return true;
	}

	/**
	 * connEtoC1: (OpenButton.action. --> ScreenCam.openButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC1() {
		try {
			// user code begin {1}
			// user code end
			this.openButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC10: (StartRecordMenuItem.action. -->
	 * ScreenCam.recordButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC10() {
		try {
			// user code begin {1}
			// user code end
			this.recordButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC11: (RewindMenuItem.action. -->
	 * ScreenCam.rewindButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC11() {
		try {
			// user code begin {1}
			// user code end
			this.rewindButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC17: (RewindButton.action. -->
	 * ScreenCam.rewindButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC17() {
		try {
			// user code begin {1}
			// user code end
			this.rewindButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC2: (SaveButton.action. --> ScreenCam.saveButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC2() {
		try {
			// user code begin {1}
			// user code end
			this.saveButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC3: (OpenMenuItem.action. -->
	 * ScreenCam.openButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC3() {
		try {
			// user code begin {1}
			// user code end
			this.openButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC4: (PlayButton.action. --> ScreenCam.playButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC4() {
		try {
			// user code begin {1}
			// user code end
			this.playButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC5: (StopButton.action. --> ScreenCam.stopButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC5() {
		try {
			// user code begin {1}
			// user code end
			this.stopButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC6: (RecordButton.action. -->
	 * ScreenCam.recordButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC6() {
		try {
			// user code begin {1}
			// user code end
			this.recordButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC7: (Save_AsMenuItem.action. -->
	 * ScreenCam.saveButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC7() {
		try {
			// user code begin {1}
			// user code end
			this.saveButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC8: (PlayMenuItem.action. -->
	 * ScreenCam.playButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC8() {
		try {
			// user code begin {1}
			// user code end
			this.playButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC9: (StopMenuItem.action. -->
	 * ScreenCam.playButton_ActionEvents()V)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC9() {
		try {
			// user code begin {1}
			// user code end
			this.playButton_ActionEvents();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM1:
	 * (ExitMenuItem.action.actionPerformed(java.awt.event.ActionEvent) -->
	 * Main.dispose()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM1(final java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.dispose();
			// user code begin {2}
			// user code end
		} catch (final java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 3:37:53
	 * AM)
	 * 
	 * @param source
	 *            java.io.File
	 * @param target
	 *            java.io.File
	 */
	public void copyFile(final java.io.File source, final java.io.File target) {
		try {
			final byte[] bytearr = new byte[512];
			int len = 0;
			final FileInputStream input = new FileInputStream(source);
			final FileOutputStream output = new FileOutputStream(target);
			try {
				while ((len = input.read(bytearr)) != -1) {
					output.write(bytearr, 0, len);
				}
			} catch (final FileNotFoundException exc) {
				lib.Util.println("Exception : " + exc);
				// throw exc;
			} catch (final SecurityException exc) {
				lib.Util.println("Exception : " + exc);
				// throw exc;
			} finally {
				input.close();
				output.close();
			}
		} catch (final Exception e) {
			lib.Util.println("Exception : " + e);
		}
	}

	/**
	 * Comment
	 */
	public void exitButton_Evenets(final KeyStroke arg1) {
		return;
	}

	/**
	 * Comment
	 */
	public void exitButton_Events(final KeyStroke arg1) {
		return;
	}

	/**
	 * Comment
	 */
	public void forwardButton_ActionEvents() {
		return;
	}

	/**
	 * Return the ExitMenuItem property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getExitMenuItem() {
		if (ivjExitMenuItem == null) {
			try {
				ivjExitMenuItem = new JMenuItem();
				ivjExitMenuItem.setName("ExitMenuItem");
				ivjExitMenuItem.setText("Exit");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjExitMenuItem;
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:52:29
	 * AM)
	 * 
	 * @return javax.swing.JFileChooser
	 */
	public JFileChooser getFileChooser() {
		if (m_FC == null) {
			m_FC = new JFileChooser();
			m_FC.setFileFilter(new lib.MovieFilter());
			if (m_LastDir != null) {
				m_FC.setCurrentDirectory(m_LastDir);
			}
		}
		return m_FC;
	}

	/**
	 * Return the FileMenu property value.
	 * 
	 * @return JMenu
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenu getFileMenu() {
		if (ivjFileMenu == null) {
			try {
				ivjFileMenu = new JMenu();
				ivjFileMenu.setName("FileMenu");
				ivjFileMenu.setFont(new java.awt.Font("sansserif", 1, 12));
				ivjFileMenu.setText("File");
				ivjFileMenu.add(getOpenMenuItem());
				ivjFileMenu.add(getSave_AsMenuItem());
				ivjFileMenu.add(getJSeparator11());
				ivjFileMenu.add(getExitMenuItem());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileMenu;
	}

	/**
	 * Return the JSeparator11 property value.
	 * 
	 * @return JSeparator
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JSeparator getJSeparator11() {
		if (ivjJSeparator11 == null) {
			try {
				ivjJSeparator11 = new JSeparator();
				ivjJSeparator11.setName("JSeparator11");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJSeparator11;
	}

	/**
	 * Return the JSeparator111 property value.
	 * 
	 * @return JSeparator
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JSeparator getJSeparator111() {
		if (ivjJSeparator111 == null) {
			try {
				ivjJSeparator111 = new JSeparator();
				ivjJSeparator111.setName("JSeparator111");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJSeparator111;
	}

	/**
	 * Insert the method's description here. Creation date: (11/12/00 3:25:48
	 * PM)
	 * 
	 * @return java.lang.String
	 */
	public java.io.File getLastDir() {
		return m_LastDir;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:20:21
	 * AM)
	 * 
	 * @return gui.Message
	 */
	public Message getM_Message() {
		return m_Message;
	}

	/**
	 * Return the JFrameContentPane property value.
	 * 
	 * @return JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JPanel getMainContentPane() {
		if (ivjMainContentPane == null) {
			try {
				ivjMainContentPane = new JPanel();
				ivjMainContentPane.setName("MainContentPane");
				ivjMainContentPane.setLayout(getMainContentPaneBorderLayout());
				ivjMainContentPane.setPreferredSize(new java.awt.Dimension(150,
						26));
				ivjMainContentPane.setMinimumSize(new java.awt.Dimension(150,
						26));
				getMainContentPane().add(getToolBarPane(), "North");
				getMainContentPane().add(getScreenPanel(), "Center");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjMainContentPane;
	}

	/**
	 * Return the MainContentPaneBorderLayout property value.
	 * 
	 * @return java.awt.BorderLayout
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.BorderLayout getMainContentPaneBorderLayout() {
		java.awt.BorderLayout ivjMainContentPaneBorderLayout = null;
		try {
			/* Create part */
			ivjMainContentPaneBorderLayout = new java.awt.BorderLayout();
			ivjMainContentPaneBorderLayout.setVgap(0);
			ivjMainContentPaneBorderLayout.setHgap(0);
		} catch (final java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		;
		return ivjMainContentPaneBorderLayout;
	}

	/**
	 * Return the MainPanelJMenuBar property value.
	 * 
	 * @return JMenuBar
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuBar getMainPanelJMenuBar() {
		if (ivjMainPanelJMenuBar == null) {
			try {
				ivjMainPanelJMenuBar = new JMenuBar();
				ivjMainPanelJMenuBar.setName("MainPanelJMenuBar");
				ivjMainPanelJMenuBar.setBorderPainted(true);
				ivjMainPanelJMenuBar.setOpaque(false);
				// ivjMainPanelJMenuBar.setAlignmentX(0.0F);
				ivjMainPanelJMenuBar.add(getFileMenu());
				ivjMainPanelJMenuBar.add(getPlayMenu());
				ivjMainPanelJMenuBar.add(getRecordMenu());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjMainPanelJMenuBar;
	}

	/**
	 * Return the OpenButton property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getOpenButton() {
		if (ivjOpenButton == null) {
			try {
				ivjOpenButton = new JButton();
				ivjOpenButton.setName("OpenButton");
				ivjOpenButton.setToolTipText("Open");
				// ivjOpenButton.setAlignmentY(0.0F);
				ivjOpenButton.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjOpenButton.setVerticalAlignment(SwingConstants.BOTTOM);
				ivjOpenButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjOpenButton.setMinimumSize(new java.awt.Dimension(20, 20));
				ivjOpenButton.setText("");
				ivjOpenButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjOpenButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjOpenButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/Open.gif")));
				ivjOpenButton.setPreferredSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjOpenButton;
	}

	/**
	 * Return the OpenMenuItem property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getOpenMenuItem() {
		if (ivjOpenMenuItem == null) {
			try {
				ivjOpenMenuItem = new JMenuItem();
				ivjOpenMenuItem.setName("OpenMenuItem");
				ivjOpenMenuItem.setText("Open...");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjOpenMenuItem;
	}

	/**
	 * Return the SaveButton1 property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getPlayButton() {
		if (ivjPlayButton == null) {
			try {
				ivjPlayButton = new JButton();
				ivjPlayButton.setName("PlayButton");
				ivjPlayButton.setToolTipText("Play");
				ivjPlayButton.setSelectedIcon(null);
				ivjPlayButton.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjPlayButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjPlayButton.setMinimumSize(new java.awt.Dimension(20, 20));
				ivjPlayButton.setPressedIcon(null);
				ivjPlayButton.setText("");
				ivjPlayButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjPlayButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjPlayButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/Play16.gif")));
				ivjPlayButton.setPreferredSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjPlayButton;
	}

	/**
	 * Insert the method's description here. Creation date: (11/11/00 1:01:07
	 * PM)
	 * 
	 * @return int
	 */
	public player.Player getPlayer() {
		if (m_Player == null) {
			m_Player = new player.Player(getScreenPanel());
		}
		return m_Player;
	}

	/**
	 * Return the FileMenu1 property value.
	 * 
	 * @return JMenu
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenu getPlayMenu() {
		if (ivjPlayMenu == null) {
			try {
				ivjPlayMenu = new JMenu();
				ivjPlayMenu.setName("PlayMenu");
				ivjPlayMenu.setFont(new java.awt.Font("sansserif", 1, 12));
				ivjPlayMenu.setText("Play");
				ivjPlayMenu.add(getPlayMenuItem());
				ivjPlayMenu.add(getStopMenuItem());
				ivjPlayMenu.add(getJSeparator111());
				ivjPlayMenu.add(getRewindMenuItem());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjPlayMenu;
	}

	/**
	 * Return the OpenMenuItem3 property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getPlayMenuItem() {
		if (ivjPlayMenuItem == null) {
			try {
				ivjPlayMenuItem = new JMenuItem();
				ivjPlayMenuItem.setName("PlayMenuItem");
				ivjPlayMenuItem.setText("Start");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjPlayMenuItem;
	}

	/**
	 * Return the SaveButton12 property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getRecordButton() {
		if (ivjRecordButton == null) {
			try {
				ivjRecordButton = new JButton();
				ivjRecordButton.setName("RecordButton");
				ivjRecordButton.setToolTipText("Record");
				ivjRecordButton.setText("");
				ivjRecordButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjRecordButton
						.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjRecordButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjRecordButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/record.GIF")));
				ivjRecordButton
						.setPreferredSize(new java.awt.Dimension(20, 20));
				ivjRecordButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjRecordButton.setMinimumSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRecordButton;
	}

	/**
	 * Insert the method's description here. Creation date: (11/11/00 1:04:06
	 * PM)
	 * 
	 * @return recorder.Recorder
	 */
	public recorder.Recorder getRecorder() {
		return m_Recorder;
	}

	/**
	 * Return the FileMenu2 property value.
	 * 
	 * @return JMenu
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenu getRecordMenu() {
		if (ivjRecordMenu == null) {
			try {
				ivjRecordMenu = new JMenu();
				ivjRecordMenu.setName("RecordMenu");
				ivjRecordMenu.setFont(new java.awt.Font("sansserif", 1, 12));
				ivjRecordMenu.setText("Record");
				ivjRecordMenu.add(getStartRecordMenuItem());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRecordMenu;
	}

	/**
	 * Return the RewindButton property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getRewindButton() {
		if (ivjRewindButton == null) {
			try {
				ivjRewindButton = new JButton();
				ivjRewindButton.setName("RewindButton");
				ivjRewindButton.setToolTipText("Rewind");
				// ivjRewindButton.setAlignmentY(0.0F);
				ivjRewindButton
						.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjRewindButton.setVerticalAlignment(SwingConstants.BOTTOM);
				ivjRewindButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjRewindButton.setMinimumSize(new java.awt.Dimension(20, 20));
				ivjRewindButton.setText("");
				ivjRewindButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjRewindButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjRewindButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/Rewind16.gif")));
				ivjRewindButton
						.setPreferredSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRewindButton;
	}

	/**
	 * Return the RewindMenuItem property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getRewindMenuItem() {
		if (ivjRewindMenuItem == null) {
			try {
				ivjRewindMenuItem = new JMenuItem();
				ivjRewindMenuItem.setName("RewindMenuItem");
				ivjRewindMenuItem.setText("Rewind");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjRewindMenuItem;
	}

	/**
	 * Return the Save_AsMenuItem property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getSave_AsMenuItem() {
		if (ivjSave_AsMenuItem == null) {
			try {
				ivjSave_AsMenuItem = new JMenuItem();
				ivjSave_AsMenuItem.setName("Save_AsMenuItem");
				ivjSave_AsMenuItem.setText("Save As...");
				ivjSave_AsMenuItem.setActionCommand("Save As");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjSave_AsMenuItem;
	}

	/**
	 * Return the SaveButton property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getSaveButton() {
		if (ivjSaveButton == null) {
			try {
				ivjSaveButton = new JButton();
				ivjSaveButton.setName("SaveButton");
				ivjSaveButton.setToolTipText("Save");
				// ivjSaveButton.setAlignmentY(0.0F);
				ivjSaveButton.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjSaveButton.setVerticalAlignment(SwingConstants.BOTTOM);
				ivjSaveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjSaveButton.setMinimumSize(new java.awt.Dimension(20, 20));
				ivjSaveButton.setText("");
				ivjSaveButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjSaveButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjSaveButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/Save.gif")));
				ivjSaveButton.setPreferredSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjSaveButton;
	}

	/**
	 * Return the JPanel1 property value.
	 * 
	 * @return JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JPanel getScreenPanel() {
		if (ivjScreenPanel == null) {
			try {
				ivjScreenPanel = new JPanel();
				ivjScreenPanel.setName("ScreenPanel");
				// ivjScreenPanel.setBorder(BasicFieldBorder);
				ivjScreenPanel.setLayout(new java.awt.BorderLayout());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjScreenPanel;
	}

	/**
	 * Return the JSeparator3 property value.
	 * 
	 * @return JSeparator
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JSeparator getSeperator() {
		if (ivjSeperator == null) {
			try {
				ivjSeperator = new JSeparator();
				ivjSeperator.setName("Seperator");
				// ivjSeperator.setAlignmentY(0.0F);
				ivjSeperator.setVisible(false);
				ivjSeperator.setMaximumSize(new java.awt.Dimension(8, 16));
				ivjSeperator.setPreferredSize(new java.awt.Dimension(8, 16));
				// ivjSeperator.setAlignmentX(0.0F);
				ivjSeperator.setMinimumSize(new java.awt.Dimension(8, 16));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjSeperator;
	}

	/**
	 * Return the Seperator1 property value.
	 * 
	 * @return JSeparator
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JSeparator getSeperator1() {
		if (ivjSeperator1 == null) {
			try {
				ivjSeperator1 = new JSeparator();
				ivjSeperator1.setName("Seperator1");
				// ivjSeperator1.setAlignmentY(0.0F);
				ivjSeperator1.setVisible(false);
				ivjSeperator1.setMaximumSize(new java.awt.Dimension(8, 16));
				ivjSeperator1.setPreferredSize(new java.awt.Dimension(8, 16));
				// ivjSeperator1.setAlignmentX(0.0F);
				ivjSeperator1.setMinimumSize(new java.awt.Dimension(8, 16));
				ivjSeperator1.setEnabled(true);
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjSeperator1;
	}

	/**
	 * Return the Seperator11 property value.
	 * 
	 * @return JSeparator
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JSeparator getSeperator11() {
		if (ivjSeperator11 == null) {
			try {
				ivjSeperator11 = new JSeparator();
				ivjSeperator11.setName("Seperator11");
				// ivjSeperator11.setAlignmentY(0.0F);
				ivjSeperator11.setVisible(false);
				ivjSeperator11.setMaximumSize(new java.awt.Dimension(8, 16));
				ivjSeperator11.setPreferredSize(new java.awt.Dimension(8, 16));
				// ivjSeperator11.setAlignmentX(0.0F);
				ivjSeperator11.setMinimumSize(new java.awt.Dimension(8, 16));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjSeperator11;
	}

	/**
	 * Return the OpenMenuItem22 property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getStartRecordMenuItem() {
		if (ivjStartRecordMenuItem == null) {
			try {
				ivjStartRecordMenuItem = new JMenuItem();
				ivjStartRecordMenuItem.setName("StartRecordMenuItem");
				ivjStartRecordMenuItem.setText("Start Recording");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjStartRecordMenuItem;
	}

	/**
	 * Return the SaveButton15 property value.
	 * 
	 * @return JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JButton getStopButton() {
		if (ivjStopButton == null) {
			try {
				ivjStopButton = new JButton();
				ivjStopButton.setName("StopButton");
				ivjStopButton.setToolTipText("Stop");
				ivjStopButton.setText("");
				ivjStopButton.setMaximumSize(new java.awt.Dimension(20, 20));
				ivjStopButton.setHorizontalTextPosition(SwingConstants.CENTER);
				ivjStopButton.setVerticalTextPosition(SwingConstants.BOTTOM);
				ivjStopButton.setIcon(new ImageIcon(getClass().getResource(
						"/gui/images/Stop16.gif")));
				ivjStopButton.setPreferredSize(new java.awt.Dimension(20, 20));
				ivjStopButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
				ivjStopButton.setMinimumSize(new java.awt.Dimension(20, 20));
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjStopButton;
	}

	/**
	 * Return the StopMenuItem property value.
	 * 
	 * @return JMenuItem
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JMenuItem getStopMenuItem() {
		if (ivjStopMenuItem == null) {
			try {
				ivjStopMenuItem = new JMenuItem();
				ivjStopMenuItem.setName("StopMenuItem");
				ivjStopMenuItem.setText("Stop");
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjStopMenuItem;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 12:33:13
	 * AM)
	 * 
	 * @return java.lang.String
	 */
	public String getTempMovieName() {
		return "~movie" + m_CurrentTimeStamp + ".mov";
	}

	/**
	 * Return the ToolBarPane property value.
	 * 
	 * @return JToolBar
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private JToolBar getToolBarPane() {
		if (ivjToolBarPane == null) {
			try {
				ivjToolBarPane = new JToolBar();
				ivjToolBarPane.setName("ToolBarPane");
				// ivjToolBarPane.setAlignmentY(0.0F);
				ivjToolBarPane.setMaximumSize(new java.awt.Dimension(150, 26));
				ivjToolBarPane.setFloatable(false);
				ivjToolBarPane
						.setPreferredSize(new java.awt.Dimension(150, 26));
				// ivjToolBarPane.setAlignmentX(0.0F);
				ivjToolBarPane.setBorderPainted(false);
				ivjToolBarPane.setMargin(new java.awt.Insets(2, 0, 0, 0));
				ivjToolBarPane.setEnabled(false);
				ivjToolBarPane.setMinimumSize(new java.awt.Dimension(150, 26));
				getToolBarPane().add(getSeperator11(),
						getSeperator11().getName());
				ivjToolBarPane.add(getOpenButton());
				getToolBarPane()
						.add(getSaveButton(), getSaveButton().getName());
				getToolBarPane()
						.add(getSeperator1(), getSeperator1().getName());
				// getToolBarPane().add(getRewindButton(),
				// getRewindButton().getName());
				getToolBarPane()
						.add(getPlayButton(), getPlayButton().getName());
				getToolBarPane()
						.add(getStopButton(), getStopButton().getName());
				getToolBarPane().add(getSeperator(), getSeperator().getName());
				getToolBarPane().add(getRecordButton(),
						getRecordButton().getName());
				// user code begin {1}
				// user code end
			} catch (final java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjToolBarPane;
	}

	/**
	 * Called whenever the part throws an exception.
	 * 
	 * @param exception
	 *            java.lang.Throwable
	 */
	private void handleException(final java.lang.Throwable exception) {

		/* Uncomment the following lines to print uncaught exceptions to stdout */
		// lib.Util.println("--------- UNCAUGHT EXCEPTION ---------");
		// exception.printStackTrace(System.out);
	}

	/**
	 * Initializes connections
	 * 
	 * @exception java.lang.Exception
	 *                The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		addWindowListener(this);
		// user code end
		getExitMenuItem().addActionListener(ivjEventHandler);
		getOpenButton().addActionListener(ivjEventHandler);
		getSaveButton().addActionListener(ivjEventHandler);
		getPlayButton().addActionListener(ivjEventHandler);
		getStopButton().addActionListener(ivjEventHandler);
		getRecordButton().addActionListener(ivjEventHandler);
		getRewindButton().addActionListener(ivjEventHandler);
		getOpenMenuItem().addActionListener(ivjEventHandler);
		getSave_AsMenuItem().addActionListener(ivjEventHandler);
		getPlayMenuItem().addActionListener(ivjEventHandler);
		getStopMenuItem().addActionListener(ivjEventHandler);
		getStartRecordMenuItem().addActionListener(ivjEventHandler);
		getRewindMenuItem().addActionListener(ivjEventHandler);
	}

	/**
	 * Initialize the class.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initialize() {
		try {
			// user code begin {1}
			// user code end
			setName("MainPanel");
			setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
			// setJMenuBar(getMainPanelJMenuBar());
			setResizable(true);
			setSize(436, 226);
			setTitle("Screen Cam");
			setContentPane(getMainContentPane());
			initConnections();
		} catch (final java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		// user code begin {2}
		// user code end
	}

	/**
	 * Insert the method's description here. Creation date: (11/12/00 4:03:55
	 * PM)
	 * 
	 * @return boolean
	 */
	public boolean isClosing() {
		return m_Closing;
	}

	boolean isIdle() {
		return m_Status == SC_IDLE;
	}

	boolean isPaused() {
		return m_Paused;
	}

	boolean isPlaying() {
		return m_Status == SC_PLAYING;
	}

	boolean isRecording() {
		return m_Status == SC_RECORDING;
	}

	/**
	 * Starts the application.
	 * 
	 * @param args
	 *            an array of command-line arguments
	 */
	public static void main(final java.lang.String[] args) {
		try {
			/* Set native look and feel */
			try {
				// UIManager.setLookAndFeel(UIManager.com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
				UIManager.setLookAndFeel(UIManager
						.getSystemLookAndFeelClassName());
			} catch (final Exception e) {
				lib.Util.println("Exception occured: " + e);
			}

			/* Create the frame */

			final ScreenCam aMain = new ScreenCam();
		} catch (final Throwable exception) {
			System.err.println("Exception occurred in main() of Main");
			exception.printStackTrace(System.out);
		}
	}

	/**
	 * Comment
	 */
	public void openButton_ActionEvents() {
		if (isRecording()) {
			return;
		}
		if (!confirmSave()) {
			return;
		}
		lib.Util.println("Inside openButton_ActionEvents");
		final JFileChooser fd = getFileChooser();
		fd.setDialogTitle("Open");
		fd.setDialogType(fd.OPEN_DIALOG);
		fd.setVisible(true);
		final int returnVal = fd.showOpenDialog(this);
		m_LastDir = fd.getCurrentDirectory();
		if (returnVal == JFileChooser.APPROVE_OPTION) {
		} else {
			return;
		}
		final java.io.File file = fd.getSelectedFile();

		if (!file.getName().toUpperCase().endsWith(".MOV")) {
			postInformation("Please open a .MOV file");
			return;
		}
		playFile(file);
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:27:22
	 * AM)
	 */
	public void pausePlaying() {
		setIdle();
		if (m_Player != null) {
			setPlaying();
			m_Player.pause();
			ivjPlayButton.setToolTipText("Play");
			ivjPlayButton.setIcon(new ImageIcon(getClass().getResource(
					"/gui/images/Play16.gif")));
			ivjPlayButton.repaint();
			m_Paused = true;
			setTitle("Paused... " + m_CurrentFile);
		}
	}

	/**
	 * Comment
	 */
	public void playButton_ActionEvents() {
		if (isRecording()) {
			return;
		}

		if (isPlaying()) {
			if (isPaused()) {
				startPlaying();
			} else {
				pausePlaying();
			}
		} else {
			if (m_CurrentFile != null) {
				playFile(m_CurrentFile);
			} else {
				postInformation("Please Open or Record a movie file.");
			}
		}
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 2:05:32
	 * AM)
	 * 
	 * @param file
	 *            java.io.File
	 */
	public void playFile(final java.io.File file) {
		if (file == null) {
			return;
		}
		lib.Util.println("Opening File` :" + file.getName());

		if (isPlaying()) {
			stopPlaying();
		}
		getPlayer();
		final Dimension size = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setContentPaneSize(size);
		m_Player.loadMovie(file);
		m_CurrentFile = file;
		startPlaying();
		repaint();
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:19:06
	 * AM)
	 * 
	 * @return int
	 * @param question
	 *            java.lang.String
	 */
	public int postInformation(final String message) {
		m_Message.showMessageDialog(this, message, "Information",
				Message.INFORMATION_MESSAGE);
		return 0;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:19:06
	 * AM)
	 * 
	 * @return int
	 * @param question
	 *            java.lang.String
	 */
	public int postQuestion(final String question) {
		// m_Message.setMessageType(Message.QUESTION_MESSAGE);
		// m_Message.setOptionType(Message.YES_NO_OPTION);
		return m_Message.showConfirmDialog(this, question, "Confirm",
				Message.YES_NO_OPTION, Message.QUESTION_MESSAGE);
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:19:06
	 * AM)
	 * 
	 * @return int
	 * @param question
	 *            java.lang.String
	 */
	public int postQuestion3(final String question) {
		// m_Message.setMessageType(Message.QUESTION_MESSAGE);
		// m_Message.setOptionType(Message.YES_NO_OPTION);
		return m_Message.showConfirmDialog(this, question, "Confirm",
				Message.YES_NO_CANCEL_OPTION, Message.QUESTION_MESSAGE);
	}

	/**
	 * Comment
	 */
	public void recordButton_ActionEvents() {
		if (isPlaying()) {
			stopPlaying();
		}

		if (isRecording()) {
			stopRecording();
		} else {
			setDefault();
			startRecording();
			try {
				Thread.sleep(1000);
			} catch (final Exception e) {
			}
		}
	}

	/**
	 * Comment
	 */
	public void rewindButton_ActionEvents() {
		if (m_Player != null) {
			m_Player.rewind();
		}
	}

	/**
	 * Comment
	 */
	public void saveButton_ActionEvents() {
		if (isRecording()) {
			return;
		}
		if (m_CurrentFile != null) {
			final JFileChooser fd = getFileChooser();
			fd.setDialogTitle("Save");
			fd.setDialogType(fd.SAVE_DIALOG);
			fd.setVisible(true);
			final int returnVal = fd.showSaveDialog(this);
			m_LastDir = fd.getCurrentDirectory();
			if (returnVal == JFileChooser.APPROVE_OPTION) {
			} else {
				return;
			}
			java.io.File file = fd.getSelectedFile();
			if (!file.getName().toUpperCase().endsWith(".MOV")) {
				file = new File(file + ".mov");
			}
			if (file == null) {
				return;
			} else {
				copyFile(m_CurrentFile, file);
				m_CurrentFile = file;
				m_SaveFlag = false;
				postInformation("Data saved to " + m_CurrentFile);
			}
		} else {
			postInformation("Nothing to save!.");
		}
	}

	public void screenCam_WindowClosing(
			final java.awt.event.WindowEvent windowEvent) {
		postQuestion("Do you really want to exit?");
		return;
	}

	/**
	 * Insert the method's description here. Creation date: (11/12/00 4:03:55
	 * PM)
	 * 
	 * @param newClosing
	 *            boolean
	 */
	public void setClosing(final boolean newClosing) {
		m_Closing = newClosing;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 12:45:01
	 * AM)
	 */
	public void setContentPaneSize(final Dimension size) {
		ivjMainContentPane.setPreferredSize(size);
		ivjMainContentPane.setMinimumSize(size);
		ivjMainContentPane.setMaximumSize(size);
		ivjMainContentPane.setSize(size);
		setSize(size);
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:00:20
	 * AM)
	 */
	public void setDefault() {
		// setSize(436, 226);
		setSize(160, 54);
		setResizable(false);
		setIdle();
	}

	void setIdle() {
		m_Status = SC_IDLE;
		ivjPlayButton.setToolTipText("Play");
		ivjPlayButton.setIcon(new ImageIcon(getClass().getResource(
				"/gui/images/Play16.gif")));
		ivjPlayButton.repaint();
		ivjRecordButton.setToolTipText("Record");
		ivjRecordButton.setIcon(new ImageIcon(getClass().getResource(
				"/gui/images/Record.gif")));
		ivjRecordButton.repaint();
		m_Paused = true;
		setTitle("Screen Cam");
	}

	/**
	 * Insert the method's description here. Creation date: (11/12/00 3:25:48
	 * PM)
	 * 
	 * @param newLastDir
	 *            java.lang.String
	 */
	public void setLastDir(final java.io.File newLastDir) {
		m_LastDir = newLastDir;
	}

	/**
	 * Insert the method's description here. Creation date: (11/30/00 1:20:21
	 * AM)
	 * 
	 * @param newM_Message
	 *            gui.Message
	 */
	public void setM_Message(final Message newM_Message) {
		m_Message = newM_Message;
	}

	void setPaused(final boolean flag) {
		m_Paused = flag;
	}

	/**
	 * Insert the method's description here. Creation date: (11/11/00 1:01:07
	 * PM)
	 * 
	 * @param newPlayer
	 *            int
	 */
	public void setPlayer(final player.Player newPlayer) {
		m_Player = newPlayer;
	}

	void setPlaying() {
		m_Status = SC_PLAYING;
	}

	/**
	 * Insert the method's description here. Creation date: (11/11/00 1:04:06
	 * PM)
	 * 
	 * @param newRecorder
	 *            recorder.Recorder
	 */
	public void setRecorder(final recorder.Recorder newRecorder) {
		m_Recorder = newRecorder;
	}

	void setRecording() {
		m_Status = SC_RECORDING;
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:27:22
	 * AM)
	 */
	public void startPlaying() {
		setIdle();
		if (m_Player != null) {
			setPlaying();
			m_Player.start();
			ivjPlayButton.setToolTipText("Pause");
			ivjPlayButton.setIcon(new ImageIcon(getClass().getResource(
					"/gui/images/Pause16.gif")));
			ivjPlayButton.repaint();
			m_Paused = false;
			setResizable(false);
			setTitle("Playing... " + m_CurrentFile);
		}
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:43:40
	 * AM)
	 */
	public void startRecording() {
		m_Recorder = new recorder.Recorder();
		final Dimension size = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		ivjRecordButton.setToolTipText("Stop");
		ivjRecordButton.setIcon(new ImageIcon(getClass().getResource(
				"/gui/images/Recording.gif")));
		ivjRecordButton.repaint();
		m_CurrentTimeStamp = new Long((new java.util.Date()).getTime())
				.toString();
		System.out.println("Saving to " + getTempMovieName());
		m_Recorder
				.setParameters(getTempMovieName(), size.width, size.height, 1);
		m_SaveFlag = true;
		setRecording();
		m_Recorder.start();
		setTitle("Recording...");
	}

	/**
	 * Comment
	 */
	public void stopButton_ActionEvents() {
		if (isPlaying()) { // move this logic to stopPlaying.. viju
			if (!isPaused()) {
				setPlaying();
				pausePlaying();
			}
		}

		if (isPlaying()) {
			stopPlaying();
		}

		if (isRecording()) {
			stopRecording();
		}
		setDefault();
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:39:46
	 * AM)
	 */
	public void stopPlaying() {
		if (m_Player != null) {
			m_Player.close();
			m_Player = null;
		}
		setIdle();
	}

	/**
	 * Insert the method's description here. Creation date: (11/27/00 12:39:46
	 * AM)
	 */
	public void stopRecording() {
		if (!isRecording()) {
			return;
		}
		if (m_Recorder != null) {
			ivjRecordButton.setToolTipText("Record");
			ivjRecordButton.setIcon(new ImageIcon(getClass().getResource(
					"/gui/images/Record.gif")));
			ivjRecordButton.repaint();
			m_Recorder.stopRecording();
			try {
				m_Recorder.getThread().join();
			} catch (final Exception e) {
				lib.Util.println("Exception occured : " + e);
			}
			lib.Util.println("Recording stopped.");
			m_Recorder = null;
			m_CurrentFile = new java.io.File(getTempMovieName());
		}
		setIdle();
	}

	public void viewToolBar() {
		/* Hide or show the toolbar */
		getToolBarPane().setVisible(!(getToolBarPane().isVisible()));
	}

	public void windowActivated(final java.awt.event.WindowEvent e) {
	}

	public void windowClosed(final java.awt.event.WindowEvent e) {
	}

	public void windowClosing(final java.awt.event.WindowEvent windowEvent) {
		if (!confirmSave()) {
		} else {
			System.exit(0);
		}
	}

	public void windowDeactivated(final java.awt.event.WindowEvent e) {
	}

	public void windowDeiconified(final java.awt.event.WindowEvent e) {
	}

	public void windowIconified(final java.awt.event.WindowEvent e) {
	}

	public void windowOpened(final java.awt.event.WindowEvent e) {
	}
}
